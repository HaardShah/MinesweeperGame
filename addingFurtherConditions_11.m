% 1. A board of zeros, which is 9 rows by 9 columns will be displayed to
%    the player.

% 2. Next, player will be asked if to enter "yes" if they are ready and 
%    "no" if they are not ready. If ready, the game will begin. If the
%    player types in no, the program will stop running and will display a short
%    message saying thanks for coming! This will be done using conditional
%    loop.

% 3. The game will then generate a random board in the background, which
%    will not be displayed. In the generated board, "0" will be safe, "1"
%    act like a "mine". This number 1 will be randomly placed within the
%    9x9 game board using the rand function (in conjunction with for loops). 
%    There numbers of "1" the player gets will be dependent on the difficulty
%    level they choose. The difficulty levels will be determined using
%    probability, which will depend on the numbers generated by the rand
%    function. Here, for loops and if (and elseif) conditionals will be
%    used.    

% 4. The player will then be asked to select a row and a column to place
%    their "guess" on what specific place in the 9x9 board is safe, hence
%    they would want to guess that. If their guess lands on a "0", they will
%    be displayed with a message saying "you are safe, continue on your
%    next turn!"

% 5. BUT, if their guess lands on a "1", they will be displayed with a message
%    saying "oh no, you hit a mine!" and then "GAME OVER!". The game will
%    then end and another message will also be displayed again saying
%    "thank you for playing Minesweeper!"

%           Hopeful creator of this game: Haard Shah :-)                 %




% Initially, the workspace and the command window will be cleared. This
% will help clear up any values from previous rounds or help if for whatever
% reason the game  breaks and needs a clear command window for the next round.
clear;
clc;

% The player will be displayed with a short message welcoming them to the game.
% The player will be asked whether they are ready to play Minesweeper.
disp("WELCOME TO MINESWEEPER!");
disp("Please type in yes if you are ready to play the game, or no to end the game.");
askPlayer = input("Would you like to play Minesweeper?: ",'s');

% A while loop is being used to "filter" the user's input. They are
% required to either type in yes or no. If they happen to enter something
% like "nah" or "yea", the input will not be accepted, hence player will be
% asked to enter either of only yes or no.
while askPlayer ~= "yes" && askPlayer ~= "no"
    askPlayer = input("Sorry? Please enter either of only 'yes' or 'no': ",'s');
end

% Now an if statement will be used depending on whether the player will
% like to play the game or not. If player says no, the command window will
% clear and they will be displayed with a short message saying "thanks for
% considering checking in!".
if askPlayer == "no"
    clc;
    disp("Thanks for considering checking in!");

% If the player says yes, the game will proceed. Initially the command
% window will be cleared up and then the some text will be displayed. This
% text will give visual representations of how the game runs. This first 
% visual will give an example of how a board initially would look like.
elseif askPlayer == "yes"
    clc;
    disp("You will now be presented with an inital Minesweeper game board!");
    disp("The value of 0 represents safe. When you play, the game board will");
    disp("be randomised with 0's and 1's.");
    gameBoard = zeros(9);
    disp(gameBoard);

% Now the example game board will be randomised, and will be shown to the
% player. This will give them an idea of the *highest* difficulty, and at the same
% time, the rules will be continued to be explained with visual representations.
fprintf('\n');
disp("Below, you are displayed with a randomised game board, which you may"); 
disp("expect in your game (if you choose hard difficulty). The '1' acts as"); 
disp("mines, and the '0' acts as safe.You want to guess where the 0's are located.");
disp("You will be given 3 shots!");
randomisedGameBoardEg = randi([0 1],9,9);
disp(randomisedGameBoardEg);

playerReady = input("Are you ready to play Minesweeper?: ",'s');
while playerReady ~= "yes" && playerReady ~= "no"
    playerReady = input("Sorry? Please enter either of only 'yes' or 'no': ",'s');
end
if playerReady == "no"
    clc;
    disp("Thanks for coming this far in!");
elseif playerReady == "yes"
    clc;
    disp("Great! Let's go!");
end

if playerReady == "yes"
    % Now the player will be displayed the levels of difficulty that exist 
    % in this game.
    fprintf("\n");
    disp("Now you will be asked to select a difficulty level. Difficulty levels");
    disp("are as follows:");
    fprintf("\n");
    disp("EASY = 1");
    disp("MEDIUM = 2");
    disp("HARD (like the game board above) = 3");
    fprintf("\n");
    % The player will be choosed to enter the level of difficulty.
    playerDifficulty = input("What level difficulty (1,2 or 3) would you like?: ");
    fprintf("\n");

    % This while loops prevents the game breaking if player tries to enter a
    % level that is not either of 1,2 or 3.
    while playerDifficulty ~= 1 && playerDifficulty ~= 2 && playerDifficulty ~= 3
        clc;
        fprintf("\n");
        disp("EASY = 1");
        disp("MEDIUM = 2");
        disp("HARD (like the game board above) = 3");
        fprintf("\n");
        playerDifficulty = input("Level difficulty not recognised, please choose between levels 1, 2 or 3:  ");
    end

    % The window will again be cleared for an easier viewing experience.
    clc;    

    % Short message displaying that the game will begin now.
    disp("Your game will begin now!");
    disp("You will now be asked to enter your guess, remember, 3 shots.");
    
    % Now, the actual game board will be generated with numbers between 0 and 1.
    % This will not be displayed to the user at any times during the game.
    % Also, rand is used instead of randi. This is because the probabilities of
    % 0 and 1 wanted to be controlled (which will be seen in the later code),
    % and it would not have been possible with randi function as it will
    % generate integers. 
    realGameBoard = rand(9);

    % The following code is for the level of difficulty that the player
    % selects. Here the rand function was deemed to be more useful, as
    % probabilities can be used. This cannot be done with a randi function
    % as it would generate integers between 0 and 1 inclusive, which are
    % only 0 and 1.
    for i = 1:9
        for j =  1:9
        
            if playerDifficulty == 1
                if realGameBoard(i,j) > 0 && realGameBoard(i,j) < 0.85
                realGameBoard(i,j) = 0;
                else
                realGameBoard(i,j) = 1;
                end
            elseif playerDifficulty == 2
                if realGameBoard(i,j) > 0 && realGameBoard(i,j) < 0.67
                realGameBoard(i,j) = 0;
                else
                realGameBoard(i,j) = 1;
                end
            elseif playerDifficulty == 3
                if realGameBoard(i,j) > 0 && realGameBoard(i,j) < 0.50
                realGameBoard(i,j) = 0;
                else
                realGameBoard(i,j) = 1;
                end
            
            end
        end
    end

% Now the count function will be initialised as 3. This is because the 
% player will be given 3 shots. The count function will also be used as a
% shot counter, which will be displayed to the player as player progresses
% in the game.
count = 3;

% Some text will be displayed, which is informing the player that the rows
% and columns enter should only be between 1 and 9.
disp("Please remember that the board has dimensions 9x9. Therefore only");
disp("enter row and column entries that are between 1 and 9,");

for i = 1:3
    fprintf("\n");
    fprintf("                                                              shots left: %d \n", count);
    sr = input("Please enter the row: ");
    while sr < 1 || sr > 9
            sr = input("You can only enter a row between 1 and 9 (inclusive): ");
    end
   % The while loop above makes sure that the row player enters is between
   % 1 and 9 inclusive. If not, it will keep asking the player until a
   % valid row is entered.
    
    sc = input("Please enter the column: ");
    while sc < 1 || sc > 9
            sc = input("You can only enter a column between 1 and 9 (inclusive): ");
    end    
   % The while loop above makes sure that the column player enters is between
   % 1 and 9 inclusive. If not, it will keep asking the player until a
   % valid column is entered.
    
   % The following code is for determining whether the player's guess
   % landed on 0 or 1. If it landed at 1, the game will end with a short
   % message displayed. If the player lands on a 0, a short message saying
   % their shot was safe will be displayed and the game will continue
   % until the player completes 3 shots successfully.
    shot = realGameBoard(sr,sc);
    disp(shot);
    if shot == 1
        disp("Oh no! You hit a mine!");
        disp("GAME OVER.");
        disp("Thank you for playing Minesweeper!");
        break
    elseif shot == 0
        count = count - 1;
        if count == 0
            disp("You won!");
            disp("Thank you for playing Minesweeper!");
            break
        end
        
        disp("You are safe, continue on your next turn!");
    end
    
end
end
end

% End of code, hence the game.
